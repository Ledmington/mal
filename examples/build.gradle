plugins {
    id 'application'
    id 'de.undercouch.download' version '5.6.0'
}

static def path(final String ...s) {
    return String.join(File.separator, s)
}

static def getDate() {
    return new Date().format('yyyyMMddHHmmss')
}

final String appName = "mal-examples"
final String fatJarBaseName = "${appName}"
final String fatJarName = "${fatJarBaseName}.jar"
final String fatJarPath = path("${project.layout.buildDirectory.get().toString()}", "libs", "${fatJarName}")
final String mainClassName = "com.ledmington.mal.examples.Main"

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':lib')
}

application {
    mainClass = "com.ledmington.mal.examples.Main"
}

test.enabled = false
javadoc.enabled = false

tasks.register('fatJar', Jar) {
    group 'distribution'
    description 'Builds the fat jar of the application'
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        archiveBaseName = appName
        attributes(
                //"Implementation-Title": "Gradle",
                "Implementation-Version": version,
                "Main-Class": "$mainClassName"
        )
    }
    archiveBaseName = "${fatJarBaseName}"

    doLast {
        println "The fat jar is ${fatJarPath}"
        println String.format("Fat jar size: %.3f MB", new File(fatJarPath).length() / 1_000_000)
    }
}

def asyncProfilerVersion = "2.9"

if (System.getProperty("os.name").toLowerCase().contains("windows")) {
    println("Sorry, no support for async-profiler on Windows at the moment. The tasks 'downloadAsyncProfiler', 'asyncProfiler' and 'flamegraph' will not be generated.")
    println("Check this for news: https://github.com/async-profiler/async-profiler/issues/188")
} else {
    tasks.register('downloadAsyncProfiler', Download) {
        src "https://github.com/async-profiler/async-profiler/releases/download/v${asyncProfilerVersion}/async-profiler-${asyncProfilerVersion}-linux-x64.tar.gz"
        dest new File("${project.layout.buildDirectory.get().toString()}", "async-profiler.tar.gz")
        overwrite false
    }

    tasks.register('asyncProfiler', Copy) {
        dependsOn downloadAsyncProfiler
        from tarTree(downloadAsyncProfiler.dest)
        into path("${project.layout.buildDirectory.get().toString()}", "async-profiler")
        includeEmptyDirs(false)
        ext {
            profiler = path("${project.layout.buildDirectory.get().toString()}", "async-profiler", "async-profiler-${asyncProfilerVersion}-linux-x64", "build", "libasyncProfiler.so")
        }
    }

    tasks.register('flamegraph', JavaExec) {
        dependsOn([asyncProfiler, fatJar])
        group 'useful'
        description 'Runs the app with async-profiler attached and generates a flamegraph'
        String flamegraphFile = path("${project.layout.buildDirectory.get().toString()}", "flamegraphs", "flamegraph-cpu-${getDate()}.html")
        doFirst {
            mkdir path("${project.layout.buildDirectory.get().toString()}", "flamegraphs")
        }
        classpath fatJarPath
        args = ["knapsack"]
        jvmArgs = [
                "-agentpath:${asyncProfiler.profiler}=start,event=cpu,file=${flamegraphFile}"
        ]
        doLast {
            if(new File(flamegraphFile).exists()) {
                println "\n"
                println "Generated flamegraph ${flamegraphFile}"
            } else {
                println "\n"
                println "It seems that a flamegraph has not been generated. Have you checked your perf_event_paranoid?"
            }
        }
    }
}